'''pyAA: Microsoft Active Accessibility for Python

Microsoft Active Accessibility (MSAA) is the current UI automation solution on 
the Windows platform. With this module, you can watch for a variety of Windows 
events, navigate the object model of any window that supports MSAA, perform 
actions on a variety of controls, etc.

See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msaa/msaastart_9w2t.asp
for more information on MSAA.
'''

import os, os.path, sys
from distutils.sysconfig import get_python_inc
from distutils.core import setup, Extension
from distutils.command.build_ext import build_ext

# replace any references to pythoncom2x with the proper version number in the .i file
f = file('pyAAc_raw.i')
text = f.read()
f.close()
text = text.replace('pythoncomxx', 'pythoncom%s%s' % (sys.version[0], sys.version[2]))
f = file('pyAAc.i', 'w')
f.write(text)
f.close()

# I'm overriding swig_sources in build_ext so that I can change it's behavior:
# 1) I want to be able to pass different arguments to swig
# Otherwise this is a copy of what I got from the docutils source

class MYbuild_ext(build_ext):
    def swig_sources (self, sources, extensions=None):
        """Walk the list of source files in 'sources', looking for SWIG
        interface (.i) files.  Run SWIG on all that are found, and
        return a modified 'sources' list with SWIG source files replaced
        by the generated C (or C++) files.
        """

        new_sources = []
        swig_sources = []
        swig_targets = {}

        # XXX this drops generated C/C++ files into the source tree, which
        # is fine for developers who want to distribute the generated
        # source -- but there should be an option to put SWIG output in
        # the temp dir.
        if self.swig_cpp:
            target_ext = '.cpp'
        else:
            target_ext = '.c'

        for source in sources:
            (base, ext) = os.path.splitext(source)
            if ext == ".i":             # SWIG interface file
                new_sources.append(base + target_ext)
                swig_sources.append(source)
                swig_targets[source] = new_sources[-1]
            else:
                new_sources.append(source)

        if not swig_sources:
            return new_sources

        swig = self.find_swig()
        swig_cmd = [swig, "-python", "-nodefault" ]
        if self.swig_cpp:
            swig_cmd.append("-c++")

        for source in swig_sources:
            target = swig_targets[source]
            self.announce("swigging %s to %s" % (source, target))
            (base, ext) = os.path.splitext(target)
            self.spawn(swig_cmd + ["-o", target, source])

        return new_sources
#
# end of overriding
#

classifiers = """\
Development Status :: 4 - Beta
Intended Audience :: Developers
License :: OSI Approved :: MIT License
Programming Language :: Python
Topic :: Software Development :: Libraries :: Python Modules
"""
doclines = __doc__.split('\n')
ext = Extension('pyAA._pyAAc', ['pyAAc.i'],
                libraries=['oleaut32', 'oleacc', 'ole32'])
                
# the pyAA.py is generated by SWIG, distutils will complain the first time you run this...
setup(name='pyAA',
      version='2.2b',
      author='Gary Bishop, Peter Parente',
      author_email='gb@cs.unc.edu, parente@cs.unc.edu',
      url='http://www.cs.unc.edu/assist',
      download_url='http://www.sourceforge.net/projects/uncassist',
      license='http://www.opensource.org/licenses/mit-license.php',
      description = doclines[0],
      classifiers = filter(None, classifiers.split('\n')),
      ext_modules = [ext],
      cmdclass = {'build_ext': MYbuild_ext},
      package_dir = {"pyAA" : ""},
      packages = ['pyAA'],
      data_files = [('Lib/site-packages/pyAA', ['LICENSE.txt']),
                    ('Lib/site-packages/pyAA', ['README.txt'])]
      )

